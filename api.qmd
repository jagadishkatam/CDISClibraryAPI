---
title: "Implementing the CDISC Library RESTful API in R: Automated Access to Metadata Repositories and Controlled Terminologies"
subtitle: "<br><span style='color:#3F5596; font-weight: bold;'>Pharma</span><span style='color:#8BCE88;font-weight: bold;'>SUG</span> <br>SDE<br>"
author: "<strong>Jagadish Katam</strong><br>12-Apr-2025"
footer: "<strong>[Â© 2024 Princeps Technologies All Rights Reserved.](https://www.princepstech.com/)</strong>"
format: 
  revealjs:
    controls: true
    multiplex: true
    css: custom.css
    transition: slide
    transitionSpeed: "fast"
    background-transition: convex  
    highlight-style: dracula
    slideWidth: 1920
    slideHeight: 1080
    title-slide-attributes:
      data-background-image: img/cdisc.png
      data-background-size: cover
      data-background-opacity: "0.1"
from: markdown+emoji
execute:
  echo: true
  freeze: auto
editor: visual
---

## CDISC Library {.title-slide .smaller }

<br/>

::: {.incremental}
-   The CDISC Library is a single, trusted, authoritative source of CDISC Data Standards metadata and Controlled Terminology.<br> <br>

-   It is a cloud-based metadata repository (MDR) on the Microsoft Azure platform.<br> <br>

-   CDISC Library is composed of

    1)  Data Standards Browser (DSB) and
    2)  API <br> <br>

-   Users can browse and retrieve metadata such as CDASH, SDTM, ADaM, QRS, Controlled Terminology, etc.<br> <br>

-   CDISC makes our data standards available in PDF format. The Implementation Guides (IG) and all applicable contents are now also available in machine-readable format. <br> <br>

:::

<br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>

## Data Standards Browser (DSB) {.title-slide .smaller}

<br/>

::: {.fragment style="font-size: 25px"}
![](img/cdisc_lib_part1.mp4){fig-align="center" width="1200"}

<!-- ![](img/cdisc_lib_img1.png){fig-align="center" width="1200"} -->
:::

<!-- ::: {.fragment .fade-out style="font-size: 25px"} -->
<!-- ![](img/cdisc_lib_img2.png){fig-align="center" width="1200"} -->
<!-- ::: -->

<!-- ::: {.fragment .fade-out style="font-size: 25px"} -->
<!-- ![](img/cdisc_lib_img3.png){fig-align="center" width="1200"} -->
<!-- ::: -->

<br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>

## API {.title-slide .smaller}

<br/>

::: {.fragment}

-   API stands for Application Programming Interface.
-   APIs allow two applications to communicate with each other.
-   It is a contract between the client and server.
-   The client sends a request through the API, and after performing the action, the API sends back a response to the client. <br> <br>
-   Types of Application Programming Interface <br/> <br>
    -   Private API <br>
    -   Public API <br>
    -   Partner API

:::

<br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>

## Application Programming Interface (API) {.title-slide .smaller}

<br/>

::: {.fragment .source-text layout="[[95], [5]]"}

![](img/api.svg){fig-align="center" width="700"}

Source: https://www.postman.com/what-is-an-api/

:::

<br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>

## What is REST? {.title-slide .smaller}

<br/>

::: {.fragment}

-   REST stands for REpresentational State Transfer.
-   It is a set of functions to which the developers perform requests and receive responses. In REST API, interaction is made via the HTTP protocol.
-   REST also allows computers to talk to each other over a network.
-   It returns the object in the form of XML or JavaScript Object Notation (JSON).

:::

:::: {.fragment layout="[[90], [10]]" .source-text}

![](img/cdisc_img1.png){fig-align="center" width="400"}


Source: https://www.slideshare.net/slideshow/what-is-rest-api-rest-api-concepts-and-examples-edureka/174179563

::::

<br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>

## HTTP CODES {.title-slide .smaller}

<br/>

::: {.fragment layout="[[80], [20]]"}
Some of the common HTTP result codes that are often used inside REST APIs are as follows: <br/> <br> [200 - "OK"]{style="font-weight:bold; color:green;"} <br> 201 - "Created" (Used with POST). <br> 400 - "Bad Request" (Perhaps missing required parameters). <br> 401 - "Unauthorized" (Missing authentication parameters). <br> 403 - "Forbidden" (You were authenticated but lacking required privileges). <br> [404 - "Not Found"]{style="font-weight:bold;color:red;"}.

![](img/restful.png){.fragment fig-align="center" width="500"}
:::

<br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>

## HTTP Method - GET {.title-slide .smaller}

::::: columns


::: {.column style="font-size: 25px" .fragment}
![](img/cdisc_img2.png){fig-align="center" width="410" height="100"}
:::

::: {.column style="font-size: 25px" .fragment}
![](img/cdisc_img3.png){fig-align="center" width="450" height="10"}
:::
:::::

<br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br><br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>

## Endpoint and Parameters {.title-slide .smaller}

<br/>

```{r setup}
#| echo: false
#| code-line-numbers: false
#| eval: true

library(tidyCDISC)
library(dplyr)
library(networkD3)
library(plotly)
library(ggalluvial)
library(DT)
library(httr2)
library(jsonlite)
library(dplyr)
library(purrr)
```

```{r}
#| echo: false
#| code-line-numbers: false
#| eval: false

# API URL
url <- "https://api.library.cdisc.org/api/mdr/products"

# Construct the request
req <- request(url) %>%
  req_headers(
    'Cache-Control' = 'no-cache',
    'api-key' = 'ba3d68879a224d8090406948f8155bae',
    'content-type' = 'application/json'
  )

# Send the request and fetch response
resp <- req %>% req_perform()

# Parse JSON response
endpoint <- resp %>% resp_body_json()


# Check if 'data-analysis' and 'adam' exist
if (!is.null(endpoint$`_links`$`data-tabulation`$`_links`$sdtmig)) {
  
  # Extract the list of 'adam' links
  endpoint_sdtmig_list <- endpoint$`_links`$`data-tabulation`$`_links`$sdtmig
  
  # Loop through all elements in 'adam' and extract required fields
  endpoint_sdtmig_df <- map_dfr(1:length(endpoint_sdtmig_list), function(i) {
    endpoint_sdtmig_parameter <- endpoint_sdtmig_list[[i]]
    
    # Create a data frame with extracted fields
    data.frame(
      href  = endpoint_sdtmig_parameter$href,
      title = endpoint_sdtmig_parameter$title,
      type  = endpoint_sdtmig_parameter$type,
      stringsAsFactors = FALSE
    )
  })
  
  # Print or save dataframe
  print(endpoint_sdtmig_df)
  # write.csv(adam_df, "adam_links.csv", row.names = FALSE)
  
  print("CSV file saved successfully as sdtm_links.csv")
} else {
  print("No 'adam' links found in the response.")
}
 
```

::: {style="font-size: 0.50em" .fragment}
```{r}
#| echo: false

endpoint_df <- readRDS("data/endpoint_df.rds")

DT::datatable(endpoint_df |> rename_all(toupper), filter = 'top', options = list(
  pageLength = 10, autoWidth = FALSE
))

```
:::

<br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br><br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>

## CDISC Library API {.title-slide .smaller}

<br/>

::: {style="font-size: 25px" .fragment}
![](img/cdisc_lib_part2.mp4){fig-align="center" width="1200"}
:::

<br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>

## CDISC Library Access {.title-slide .smaller}

<br/>

```{r }
#| echo: true
#| code-line-numbers: '2|5-10|13|16'
#| eval: false
#| code-copy: true


# API URL
url <- "https://api.library.cdisc.org/api/mdr/sdtmig/3-4"

# Construct the request
req <- request(url) %>%
  req_headers(
    'Cache-Control' = 'no-cache',
    'api-key' = 'ba3d68879a224d8090406948f8155bae',
    'content-type' = 'application/json'
  )

# Send the request and fetch response
resp <- req %>% req_perform()

# Parse JSON response
json_list <- resp %>% resp_body_json()
```

<br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>

## Structure of the JSON file {.title-slide .smaller}

<br/>

::: {style="font-size: 25px"}
![](img/list.mp4){fig-align="center" width="1200" height="500"}
:::

<br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>

## Extract data from the JSON file {.title-slide .smaller}

<br>

- The JSON data is loaded into R as a list, it means it contains key-value pairs (named lists) or an array of objects (list of lists). <br>
- We can convert, manipulate, or flatten it for further use.<br>

<br>

```{r}
#| echo: true
#| code-line-numbers: '|'
#| eval: false
#| code-copy: true


# Convert list of lists into a data frame
df <- map_dfr(1:length(json_list$classes), function(i) {  # Loop through classes
  class_item <- json_list$classes[[i]]  # Extract class
  
  map_dfr(1:length(class_item$datasets), function(j) {  # Loop through datasets in each class
    dataset_item <- class_item$datasets[[j]]  # Extract dataset

    # Create a data frame with required fields
    data.frame(
      class = class_item$label,
      datastructure = dataset_item$datasetStructure %||% NA,
      description = dataset_item$description %||% NA,
      label = dataset_item$label %||% NA,
      name = dataset_item$name %||% NA,
      ordinal = dataset_item$ordinal %||% NA,
      stringsAsFactors = FALSE
    )
  })
})

```

<br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>

## SDTMIG Classes and Datasets {.title-slide .smaller}

<br/>

::: {style="font-size: 0.50em"}
```{r}
#| echo: false

df <- readRDS("data/df.rds")

DT::datatable(df |> rename_all(toupper), filter = 'top', options = list(
  pageLength = 5, autoWidth = FALSE
))
```
:::

<br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>

## Extract SDTMIG Datasets and Variables from json {.title-slide .smaller}

<br/>

```{r }
#| echo: true
#| code-line-numbers: '|'
#| eval: false
#| code-copy: true

# Convert list of lists into a data frame
dataset_df <- map_dfr(1:length(json_list$classes), function(i) {
  class_data <- json_list$classes[[i]]
  
  map_dfr(1:length(class_data$datasets), function(j) {
    dataset <- class_data$datasets[[j]]
    
    if (is.null(dataset$datasetVariables)) {
      return(NULL)  # Skip datasets with no variables
    }
    
    # Extract dataset variables
    variable_df <- map_dfr(1:length(dataset$datasetVariables), function(x) {
      var <- dataset$datasetVariables[[x]]
      
    # Extract codelist href if available, otherwise NA
      href_value <- if (!is.null(var$`_links`$codelist) && length(var$`_links`$codelist) > 0) {
        var$`_links`$codelist[[1]]$href %||% NA
      } else {
        NA
      }
      
      data.frame(
        dataset = dataset$name,
        Ordinal = as.numeric(var$ordinal) %||% NA,
        Name = var$name %||% NA,
        Label = var$label %||% NA,
        Description = var$description %||% NA,
        Datatype = var$simpleDatatype %||% NA,
        Role = var$role %||% NA,
        core = var$core %||% NA,
        Codelist = stringr::str_extract(href_value,'C\\d+$'),
        stringsAsFactors = FALSE
      )
    })
    
  })
}) |> arrange(dataset,Ordinal)
```

<br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>

## SDTMIG Datasets & Variables {.title-slide .smaller}

<br/>

::: {style="font-size: 0.50em"}
```{r}
#| echo: false

dataset_df <- readRDS("data/dataset_df.rds")

DT::datatable(dataset_df |> rename_all(toupper), filter = 'top', options = list(
  pageLength = 3, autoWidth = FALSE
))
```
:::

<br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>

## Controlled Terminology API Request {.title-slide .smaller}

<br/>

```{r }
#| echo: true
#| code-line-numbers: '2|5-10|13|16'
#| eval: false
#| code-copy: true

# API URL
url <- "https://api.library.cdisc.org/api/mdr/ct/packages/sdtmct-2024-09-27"

# Construct the request
req <- request(url) %>%
  req_headers(
    'Cache-Control' = 'no-cache',
    'api-key' = 'ba3d68879a224d8090406948f8155bae',
    'content-type' = 'application/json'
  )

# Send the request and fetch response
resp <- req %>% req_perform()

# Parse JSON response
ct_list <- resp %>% resp_body_json()
```

<br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>

## Controlled Terminology Response returns JSON {.title-slide .smaller}

<br/>

```{r }
#| echo: true
#| code-line-numbers: '2-40'
#| eval: false
#| code-copy: true

# Get length of codelists
codelist_count <- length(ct_list$codelists)

# Convert all nested lists into a data frame
ct_codelist_df <- map_dfr(1:codelist_count, function(i) {
  
  # Extract current codelist
  ctcodelist <- ct_list$codelists[[i]]
  
  # Extract codelist-level details
  ct_codelist_info <- data.frame(
    codelist = ctcodelist$conceptId %||% NA,
    definition = ctcodelist$definition %||% NA,
    extensible = ctcodelist$extensible %||% NA,
    name = ctcodelist$name %||% NA,
    nci_preferred_Term = ctcodelist$preferredTerm %||% NA,
    submission_Value = ctcodelist$submissionValue %||% NA,
    stringsAsFactors = FALSE
  )
  
  # Get length of terms
  terms_count <- length(ctcodelist$terms)
  
  # Extract term-level details (if available)
  terms_df <- map_dfr(1:terms_count, function(j) {
    term <- ctcodelist$terms[[j]]
    data.frame(
      term = term$conceptId %||% NA,
      term_definition = term$definition %||% NA,
      term_nci_preferred_Term = term$preferredTerm %||% NA,
      term_submission_Value = term$submissionValue %||% NA,
      stringsAsFactors = FALSE
    )
  })
  
  # Merge codelist details with terms (repeat codelist info for each term)
  bind_cols(ct_codelist_info, terms_df)
})
```

<br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>

## Controlled Terminology Response returns JSON {.title-slide .smaller}

<br/>

::: {style="font-size: 0.50em"}
```{r }
#| echo: false

ct_codelist_df <- readRDS("data/ct_codelist_df.rds")

DT::datatable(ct_codelist_df |> rename_all(toupper), filter = 'top', options = list(
  pageLength = 4, autoWidth = TRUE
))
```
:::

<br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>

## References {.title-slide .smaller}

<br/>

-   SlideShare User. Introduction to APIs (Application Programming Interface). SlideShare. Accessed \[Date\]. https://www.slideshare.net/slideshow/introduction-to-apis-application-programming-interface/229843498.

<br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>

## Conclusion {.title-slide .smaller}

<br/>

-   Direct access to CDISC standards (e.g., SDTM, ADaM, Define-XML) and retrieve the latest official CDISC standards. <br/> <br>
-   Helps enforce standardized data structures in clinical trials.. <br/> <br>
-   Reduces manual errors in implementing CDISC models.. <br> <br>
-   Provides structured JSON responses instead of PDFs or static documents.<br> <br/>
-   Enables programmatic integration with clinical trial software and tools.<br/><br>
-   Access controlled terminology, dataset structures, and variable definitions.

<br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/>

## 

::::: columns
::: {.column width="50%"}

[Thank you!]{style="font-size: 100px; text-align:center; color: black"}

<br/>

`r fontawesome::fa(c("slideshare"), "black")` [jagadishkatam.github.io](https://jagadishkatam.github.io/CDISClibraryAPI/api.html){style="font-size: 40px; text-align=left; color: orange"}<br/><br/>

![](img/jagadishkatam.github.io.png){fig-align="center" width="40%"}

:::

::: {.column width="50%"}
<br/> <br/> <br/>

![](img/linkedin.png){style="font-size: 35px" fig-align="center" width="50%"}
:::
:::::
